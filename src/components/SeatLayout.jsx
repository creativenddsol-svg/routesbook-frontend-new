// src/components/SeatLayout.jsx
import React from "react";
import PropTypes from "prop-types";
// Removed import: import { FaMale, FaFemale } from "react-icons/fa";

/* ---------- SVG Icons to replace react-icons/fa (From previous code) ---------- */

// Male Icon (FaMale replacement)
const MaleIcon = () => (
Â  <svg
Â  Â  xmlns="http://www.w3.org/2000/svg"
Â  Â  viewBox="0 0 448 512"
Â  Â  fill="currentColor"
Â  Â  className="w-3 h-3 sm:w-4 sm:h-4"
Â  >
Â  Â  <path d="M256 64c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H128c-17.7 0-32 14.3-32 32s14.3 32 32 32H224V416c0 17.7 14.3 32 32 32s32-14.3 32-32V288H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V64z" />
Â  </svg>
);

// Female Icon (FaFemale replacement)
const FemaleIcon = () => (
Â  <svg
Â  Â  xmlns="http://www.w3.org/2000/svg"
Â  Â  viewBox="0 0 512 512"
Â  Â  fill="currentColor"
Â  Â  className="w-3 h-3 sm:w-4 sm:h-4"
Â  >
Â  Â  <path d="M416 256c0 6.1-5.1 11.1-11.6 12.3c35.6 23 60.1 63.8 60.1 111.4c0 88.4-71.6 160-160 160s-160-71.6-160-160c0-47.5 24.5-88.4 60.1-111.4c-6.5-1.3-11.6-6.2-11.6-12.3c0-44.2 35.8-80 80-80c.7 0 1.4 .1 2.1 .2c10.8-19.1 27.6-35.3 47.9-46.7V48c0-26.5 21.5-48 48-48s48 21.5 48 48V131.5c20.3 11.5 37.1 27.7 47.9 46.7c.7-.1 1.4-.2 2.1-.2c44.2 0 80 35.8 80 80zM320 256c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z" />
Â  </svg>
);

/* ---------- Matte palette (selected = blue) ---------- */
const PALETTE = {
Â  blue: "#4C6EF5",
Â  blueBorder: "#3F5ED8",
Â  blueHoverTint: "#EEF2FF",
Â  border: "#E5E7EB",
Â  text: "#1A1A1A",
Â  textSubtle: "#6B7280",
Â  male: "#6D5BD0",
Â  maleBorder: "#5B4FCF",
Â  female: "#E05B88",
Â  femaleBorder: "#D04B78",
};

/* ---------- Single Seat Component ---------- */
const Seat = ({
Â  seat,
Â  isBooked,
Â  isLocked,
Â  isSelected,
Â  gender,
Â  onClick,
Â  title,
}) => {
Â  const innerSeatClasses = isBooked
Â  Â  ? gender === "F"
Â  Â  Â  ? "bg-[#E05B88] text-white border-[#D04B78] cursor-not-allowed"
Â  Â  Â  : "bg-[#6D5BD0] text-white border-[#5B4FCF] cursor-not-allowed"
Â  Â  : isLocked
Â  Â  ? "bg-[#FEE2E2] text-[#B91C1C] border-[#FCA5A5] cursor-not-allowed"
Â  Â  : isSelected
Â  Â  ? "bg-[#4C6EF5] text-white border-[#3F5ED8] shadow-sm"
Â  Â  : "bg-white text-[#1A1A1A] border-[#E5E7EB] hover:bg-[#EEF2FF] hover:border-[#4C6EF5]";

Â  const disabled = isBooked || isLocked;

Â  return (
Â  Â  <button
Â  Â  Â  type="button"
Â  Â  Â  onClick={disabled ? undefined : onClick}
Â  Â  Â  title={title}
Â  Â  Â  aria-label={`Seat ${seat}`}
Â  Â  Â  aria-pressed={isSelected}
Â  Â  Â  disabled={disabled}
Â  Â  Â  className={`
Â  Â  Â  Â  relative group select-none
Â  Â  Â  Â  w-12 h-12 sm:w-10 sm:h-10
Â  Â  Â  Â  rounded-xl flex items-center justify-center
Â  Â  Â  Â  transition-transform duration-100
Â  Â  Â  Â  active:scale-95 focus-visible:outline-none
Â  Â  Â  Â  focus-visible:ring-2 focus-visible:ring-[#4C6EF5]/60
Â  Â  Â  Â  disabled:opacity-90
Â  Â  Â  `}
Â  Â  Â  style={{ WebkitTapHighlightColor: "transparent" }}
Â  Â  >
Â  Â  Â  <span
Â  Â  Â  Â  className={`
Â  Â  Â  Â  Â  absolute inset-1 sm:inset-[3px]
Â  Â  Â  Â  Â  border-2 rounded-lg
Â  Â  Â  Â  Â  flex items-center justify-center
Â  Â  Â  Â  Â  font-semibold
Â  Â  Â  Â  Â  text-[11px] sm:text-xs
Â  Â  Â  Â  Â  ${innerSeatClasses}
Â  Â  Â  Â  `}
Â  Â  Â  >
Â  Â  Â  Â  {/* UPDATED: Use the local SVG icons instead of FaMale/FaFemale */}
Â  Â  Â  Â  {isBooked ? gender === "F" ? <FemaleIcon /> : <MaleIcon /> : seat}
Â  Â  Â  </span>
Â  Â  </button>
Â  );
};

Seat.propTypes = {
Â  seat: PropTypes.string.isRequired,
Â  isBooked: PropTypes.bool.isRequired,
Â  isLocked: PropTypes.bool.isRequired,
Â  isSelected: PropTypes.bool.isRequired,
Â  gender: PropTypes.string,
Â  onClick: PropTypes.func.isRequired,
Â  title: PropTypes.string,
};

/* ---------- Seat Layout Component (Main Logic) ---------- */
const SeatLayout = ({
Â  seatLayout,
Â  bookedSeats,
Â  selectedSeats,
Â  onSeatClick,
Â  bookedSeatGenders,
}) => {
Â  // Normalize to strings once to avoid type mismatches
Â  const layoutAsStrings = Array.isArray(seatLayout)
Â  Â  ? seatLayout.map(String)
Â  Â  : [];

Â  const is49Seater = layoutAsStrings.length === 49;
Â  const is37Seater = layoutAsStrings.length === 37;

Â  // ðŸ”§ Avoid repeated .map/.includes by using Sets (fixes perf hiccups on large layouts)
Â  const bookedSet = new Set(
Â  Â  (Array.isArray(bookedSeats) ? bookedSeats : []).map(String)
Â  );
Â  const selectedSet = new Set(
Â  Â  (Array.isArray(selectedSeats) ? selectedSeats : []).map(String)
Â  );

Â  /**
Â  Â * Checks adjacent seats for gender information to enforce booking rules (e.g., female next to female).
Â  Â * @param {number|string} seatNumber - The current seat number.
Â  Â * @param {Array<Array<number|string|null>>} layoutGrid - The grid representation of the layout.
Â  Â * @returns {string|null} The gender ('M' or 'F') of an adjacent booked seat, or null.
Â  Â */
Â  const getAdjacentSeatInfo = (seatNumber, layoutGrid) => {
Â  Â  for (const row of layoutGrid) {
Â  Â  Â  const idx = row.indexOf(seatNumber);
Â  Â  Â  if (idx !== -1) {
Â  Â  Â  Â  // Check left neighbor
Â  Â  Â  Â  if (idx > 0 && row[idx - 1] !== null) {
Â  Â  Â  Â  Â  const neighborSeat = String(row[idx - 1]);
Â  Â  Â  Â  Â  if (bookedSeatGenders[neighborSeat])
Â  Â  Â  Â  Â  Â  return bookedSeatGenders[neighborSeat];
Â  Â  Â  Â  }
Â  Â  Â  Â  // Check right neighbor
Â  Â  Â  Â  if (idx < row.length - 1 && row[idx + 1] !== null) {
Â  Â  Â  Â  Â  const neighborSeat = String(row[idx + 1]);
Â  Â  Â  Â  Â  if (bookedSeatGenders[neighborSeat])
Â  Â  Â  Â  Â  Â  return bookedSeatGenders[neighborSeat];
Â  Â  Â  Â  }
Â  Â  Â  Â  return null;
Â  Â  Â  }
Â  Â  }
Â  Â  return null;
Â  };

Â  /**
Â  Â * Determines the booking and selection status of a given seat.
Â  Â * @param {number|string} seat - The seat number.
Â  Â * @returns {{isBooked: boolean, isLocked: boolean, isSelected: boolean, gender: string|null}}
Â  Â */
Â  const getSeatStatus = (seat) => {
Â  Â  const seatStr = String(seat);
Â  Â  const isBooked = !!bookedSeatGenders[seatStr];
Â  Â  const isLocked =
Â  Â  Â  bookedSet.has(seatStr) &&
Â  Â  Â  !bookedSeatGenders[seatStr] &&
Â  Â  Â  !selectedSet.has(seatStr);

Â  Â  return {
Â  Â  Â  isBooked,
Â  Â  Â  isLocked,
Â  Â  Â  isSelected: selectedSet.has(seatStr),
Â  Â  Â  gender: isBooked ? bookedSeatGenders[seatStr] : null,
Â  Â  };
Â  };

Â  /**
Â  Â * Renders the grid of seats based on the layout structure.
Â  Â * @param {Array<Array<number|string|null>>} layoutGrid
Â  Â */
Â  const renderLayout = (layoutGrid) =>
Â  Â  layoutGrid.map((row, rowIndex) => (
Â  Â  Â  <div
Â  Â  Â  Â  key={`row-${rowIndex}`}
Â  Â  Â  Â  className="flex justify-center items-center gap-x-2 sm:gap-x-2"
Â  Â  Â  >
Â  Â  Â  Â  {row.map((seatNumber, i) => {
Â  Â  Â  Â  Â  if (seatNumber === null) {
Â  Â  Â  Â  Â  Â  // ðŸ”§ Seat-sized invisible placeholder so columns stay aligned
Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={`aisle-${rowIndex}-${i}`}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-12 h-12 sm:w-10 sm:h-10 rounded-xl"
Â  Â  Â  Â  Â  Â  Â  Â  style={{ opacity: 0 }}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  const seat = String(seatNumber);
Â  Â  Â  Â  Â  if (!layoutAsStrings.includes(seat)) {
Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={`placeholder-${rowIndex}-${i}`}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-12 h-12 sm:w-10 sm:h-10"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  const seatStatus = getSeatStatus(seat);
Â  Â  Â  Â  Â  let tooltipTitle = "";
Â  Â  Â  Â  Â  if (
Â  Â  Â  Â  Â  Â  !seatStatus.isBooked &&
Â  Â  Â  Â  Â  Â  !seatStatus.isLocked &&
Â  Â  Â  Â  Â  Â  !seatStatus.isSelected
Â  Â  Â  Â  Â  ) {
Â  Â  Â  Â  Â  Â  const adj = getAdjacentSeatInfo(seatNumber, layoutGrid);
Â  Â  Â  Â  Â  Â  if (adj)
Â  Â  Â  Â  Â  Â  Â  tooltipTitle = `Adjacent seat booked by a ${
Â  Â  Â  Â  Â  Â  Â  Â  adj === "F" ? "Female" : "Male"
Â  Â  Â  Â  Â  Â  Â  }`;
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <Seat
Â  Â  Â  Â  Â  Â  Â  key={seat}
Â  Â  Â  Â  Â  Â  Â  seat={seat}
Â  Â  Â  Â  Â  Â  Â  {...seatStatus}
Â  Â  Â  Â  Â  Â  Â  onClick={() => onSeatClick(seat)}
Â  Â  Â  Â  Â  Â  Â  title={tooltipTitle}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  })}
Â  Â  Â  </div>
Â  Â  ));

Â  /**
Â  Â * Generates the 5-column grid structure based on the total seat count.
Â  Â */
Â  const getLayoutGrid = () => {
Â  Â  if (is49Seater) {
Â  Â  Â  const grid = [];
Â  Â  Â  for (let i = 0; i < 11; i++) {
Â  Â  Â  Â  // Use seat-sized placeholder (null) in the middle position
Â  Â  Â  Â  grid.push([i * 4 + 1, i * 4 + 2, null, i * 4 + 3, i * 4 + 4]);
Â  Â  Â  }
Â  Â  Â  grid.push([45, 46, 47, 48, 49]);
Â  Â  Â  return grid;
Â  Â  }

Â  Â  if (is37Seater) {
Â  Â  Â  const base = [
Â  Â  Â  Â  [1, 2, null, 3, 4],
Â  Â  Â  Â  [5, 6, null, 7, 8],
Â  Â  Â  Â  [9, 10, null, 11, 12],
Â  Â  Â  Â  [13, 14, null, 15, 16],
Â  Â  Â  Â  [17, 18, null, 19, 20],
Â  Â  Â  Â  [21, 22, null, 23, 24],
Â  Â  Â  Â  [25, 26, null, 27, 28],
Â  Â  Â  Â  [29, 30, null, 31, 32],
Â  Â  Â  ];
Â  Â  Â  // Last row: five seats, center column filled (keeps column widths consistent)
Â  Â  Â  return [...base, [33, 34, 35, 36, 37]];
Â  Â  }

Â  Â  return [];
Â  };

Â  const layoutGrid = getLayoutGrid();

Â  return (
Â  Â  <div
Â  Â  Â  className="p-3 sm:p-4 rounded-xl overflow-x-auto"
Â  Â  Â  style={{ background: "#FFFFFF", border: `1px solid ${PALETTE.border}` }}
Â  Â  >
Â  Â  Â  {/* Header */}
Â  Â  Â  <div className="relative flex justify-between items-center mb-3 sm:mb-4 px-2 sm:px-4">
Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  className="font-bold text-[11px] sm:text-sm uppercase tracking-wider"
Â  Â  Â  Â  Â  style={{ color: PALETTE.textSubtle }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Front
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <svg
Â  Â  Â  Â  Â  className="w-7 h-7 sm:w-10 sm:h-10"
Â  Â  Â  Â  Â  style={{ color: "#9CA3AF" }}
Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  stroke="currentColor"
Â  Â  Â  Â  Â  viewBox="0 0 24 24"
Â  Â  Â  Â  Â  strokeWidth="2"
Â  Â  Â  Â  Â  strokeLinecap="round"
Â  Â  Â  Â  Â  strokeLinejoin="round"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <circle cx="12" cy="12" r="10"></circle>
Â  Â  Â  Â  Â  <circle cx="12" cy="12" r="3"></circle>
Â  Â  Â  Â  Â  <line x1="12" y1="22" x2="12" y2="18"></line>
Â  Â  Â  Â  Â  <line x1="12" y1="6" x2="12" y2="2"></line>
Â  Â  Â  Â  Â  <line x1="20.39" y1="15.39" x2="17.5" y2="14"></line>
Â  Â  Â  Â  Â  <line x1="6.5" y1="10" x2="3.61" y2="8.61"></line>
Â  Â  Â  Â  Â  <line x1="20.39" y1="8.61" x2="17.5" y2="10"></line>
Â  Â  Â  Â  Â  <line x1="6.5" y1="14" x2="3.61" y2="15.39"></line>
Â  Â  Â  Â  </svg>
Â  Â  Â  </div>

Â  Â  Â  {/* Seat grid */}
Â  Â  Â  <div className="space-y-2 sm:space-y-2 inline-block min-w-full">
Â  Â  Â  Â  {layoutGrid.length > 0 ? (
Â  Â  Â  Â  Â  renderLayout(layoutGrid)
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <p className="text-center" style={{ color: PALETTE.blue }}>
Â  Â  Â  Â  Â  Â  Unsupported seat layout.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {/* Footer */}
Â  Â  Â  <div
Â  Â  Â  Â  className="font-bold text-[11px] sm:text-sm uppercase tracking-wider text-center mt-3 sm:mt-4"
Â  Â  Â  Â  style={{ color: PALETTE.textSubtle }}
Â  Â  Â  >
Â  Â  Â  Â  Rear
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

SeatLayout.propTypes = {
Â  seatLayout: PropTypes.arrayOf(
Â  Â  PropTypes.oneOfType([PropTypes.string, PropTypes.number])
Â  ).isRequired,
Â  bookedSeats: PropTypes.array.isRequired,
Â  selectedSeats: PropTypes.arrayOf(
Â  Â  PropTypes.oneOfType([PropTypes.string, PropTypes.number])
Â  ).isRequired,
Â  onSeatClick: PropTypes.func.isRequired,
Â  bookedSeatGenders: PropTypes.object.isRequired,
};

export default SeatLayout;
